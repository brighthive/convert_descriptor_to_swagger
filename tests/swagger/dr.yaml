openapi: 3.0.0
info:
  title: BrightHive Data Resource generated OpenAPI Spec 3.0
  description: |
    Autogenerated Data Resource API OpenAPI Specification 3.0 (Swagger) file.

    [Learn more about BrightHive Data Resources.](https://github.com/brighthive/data-resource-generator)

    [Learn more about BrightHive!](https://brighthive.io)

    You can find out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: engineering@brighthive.io
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  version: 0.0.0
servers:
  - description: Local server 1
    url: "http://0.0.0.0:8081"
  - description: Local server 2
    url: "http://localhost:8000"
components:
  parameters:
    offsetParam:
      name: offset
      in: query
      description: Offset value
      required: false
      style: form
      explode: true
      schema:
        type: integer
    limitParam:
      name: limit
      in: query
      description: Item limit value
      required: false
      style: form
      explode: true
      schema:
        type: integer
    id:
      name: id
      in: path
      description: Item's primary key value
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        format: int64
  schemas:
    Links:
      type: object
      properties:
        rel:
          type: string
          description: Pagination navigation page name
          example: first
          enum:
            - self
            - first
            - prev
            - next
            - last
        href:
          type: string
          description: URI for pagination.
          example: /credential?offset=0&limit=20
      description: Pagination navigation links
    Created:
      type: object
      description: Successful creation message
      properties:
        message:
          type: string
          description: Status message
          example: Successfully added new resource.
        id:
          type: integer
          description: Item's primary key value
          format: int64
          example: 1
    People:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Person ID - A unique identifer for person.
        name:
          type: string
          description: Person's Name - The name that a Person goes by. This is left intentionally generic.
    AllPeople:
      type: object
      properties:
        people:
          type: array
          items:
            $ref: "#/components/schemas/People"
        links:
          type: array
          items:
            $ref: "#/components/schemas/Links"
    Team:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Team ID - A unique identifer for team.
        name:
          type: string
          description: Team Name - The name that a Team goes by.
    AllTeam:
      type: object
      properties:
        team:
          type: array
          items:
            $ref: "#/components/schemas/Team"
        links:
          type: array
          items:
            $ref: "#/components/schemas/Links"
    Relations:
      description: List of primary keys found in many to many relationship
      type: array
      example: [1, 2, 3]
      items:
        type: integer

    ErrorMessage:
      properties:
        error:
          type: string
          description: A description of the error that occured
          example: Internal Server Error
    ErrorMessages:
      properties:
        errors:
          type: array
          items:
            type: string
            example: Required item is missing

    400:
      description: Error
      allOf:
        - $ref: "#/components/schemas/ErrorMessage"
        - type: object
          properties:
            message:
              example: Error Message
    401:
      description: Access Denied
      allOf:
        - $ref: "#/components/schemas/ErrorMessage"
        - type: object
          properties:
            message:
              example: Access Denied
    405:
      description: Access Denied
      allOf:
        - $ref: "#/components/schemas/ErrorMessage"
        - type: object
          properties:
            message:
              example: Unimplemented delete
    500:
      description: An error occured in the server
      allOf:
        - $ref: "#/components/schemas/ErrorMessage"
        - type: object
          properties:
            error:
              example: Internal Server Error
  responses:
    Created:
      description: Successfully created an item message
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Created"
    AllPeople:
      description: List of objects
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AllPeople"
    AllTeam:
      description: List of objects
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AllTeam"
    Relations:
      description: A list of primary keys found in the many to many relationship
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Relations"
  requestBodies:
    People:
      description: Object to be added
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/People"
      required: true
    Team:
      description: Object to be added
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Team"
      required: true
    Relations:
      description: A list of primary key relationships.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Relations"
tags:
  - name: people
    description: Data Resource
    externalDocs:
      description: More info
      url: "http://example.com"
  - name: team
    description: Data Resource
    externalDocs:
      description: More info
      url: "http://example.com"
paths:
  /people:
    get:
      tags:
        - people
      summary: Get all items
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllPeople"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
    post:
      tags:
        - people
      summary: Create a new item
      requestBody:
        $ref: "#/components/requestBodies/People"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
  /people/query:
    post:
      tags:
        - people
      summary: Query for items
      requestBody:
        $ref: "#/components/requestBodies/People"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllPeople"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
  /people/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - people
      summary: Get item by ID
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/People"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
    put:
      tags:
        - people
      summary: Replace item by ID
      requestBody:
        $ref: "#/components/requestBodies/People"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
    delete:
      tags:
        - people
      summary: Delete item by ID
      responses:
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "405":
          description: Unimplemented
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/405"
    patch:
      tags:
        - people
      summary: Update data by ID
      requestBody:
        $ref: "#/components/requestBodies/People"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
  /people/{id}/team:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - people
      summary: Get many-to-many relationship
      responses:
        "200":
          $ref: "#/components/responses/Relations"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
    put:
      tags:
        - people
      summary: Replace many-to-many relationship
      requestBody:
        $ref: "#/components/requestBodies/Relations"
      responses:
        "200":
          $ref: "#/components/responses/Relations"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
    patch:
      tags:
        - people
      summary: Update many-to-many relationship
      requestBody:
        $ref: "#/components/requestBodies/Relations"
      responses:
        "200":
          $ref: "#/components/responses/Relations"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
  /team:
    get:
      tags:
        - team
      summary: Get all items
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllTeam"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
    post:
      tags:
        - team
      summary: Create a new item
      requestBody:
        $ref: "#/components/requestBodies/Team"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
  /team/query:
    post:
      tags:
        - team
      summary: Query for items
      requestBody:
        $ref: "#/components/requestBodies/Team"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllTeam"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
  /team/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - team
      summary: Get item by ID
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
    put:
      tags:
        - team
      summary: Replace item by ID
      requestBody:
        $ref: "#/components/requestBodies/Team"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
    delete:
      tags:
        - team
      summary: Delete item by ID
      responses:
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "405":
          description: Unimplemented
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/405"
    patch:
      tags:
        - team
      summary: Update data by ID
      requestBody:
        $ref: "#/components/requestBodies/Team"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
  /team/{id}/people:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - team
      summary: Get many-to-many relationship
      responses:
        "200":
          $ref: "#/components/responses/Relations"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
    put:
      tags:
        - team
      summary: Replace many-to-many relationship
      requestBody:
        $ref: "#/components/requestBodies/Relations"
      responses:
        "200":
          $ref: "#/components/responses/Relations"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
    patch:
      tags:
        - team
      summary: Update many-to-many relationship
      requestBody:
        $ref: "#/components/requestBodies/Relations"
      responses:
        "200":
          $ref: "#/components/responses/Relations"
        "401":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500"
